import { Express, Request } from 'express';
import client from 'prom-client';
import { MonitoringConfig } from './types';
import { createLogger, correlationMiddleware, requestLoggingMiddleware, createChildLogger } from './logger';
import { asyncHandler, mapDatabaseError, createErrorContext } from './errors';
import { MetricsCollector, enableDefaultMetrics } from './metrics';
import { TracingManager, TraceMethod } from './tracing';
import { HealthCheckManager } from './health';
import { PerformanceMonitor, Performance } from './performance';
import { CircuitBreakerManager, CircuitBreakerProtection } from './circuitBreaker';
export * from './types';
export * from './errors';
export { TraceMethod, Performance, CircuitBreakerProtection, createLogger, correlationMiddleware, requestLoggingMiddleware, createChildLogger, MetricsCollector, enableDefaultMetrics, TracingManager, HealthCheckManager, PerformanceMonitor, CircuitBreakerManager };
export declare function setupMonitoring(app: Express, config: MonitoringConfig): {
    logger: import("pino").Logger<never>;
    tracingManager: TracingManager;
    metricsCollector: MetricsCollector | null;
    healthCheckManager: HealthCheckManager;
    performanceMonitor: PerformanceMonitor;
    circuitBreakerManager: CircuitBreakerManager;
    createChildLogger: (req: Request, metadata?: Record<string, any>) => import("pino").default.Logger<never>;
    asyncHandler: typeof asyncHandler;
    mapDatabaseError: typeof mapDatabaseError;
    createErrorContext: typeof createErrorContext;
    businessMetrics: {
        loginAttempts: client.Counter<string>;
        tokenValidations: client.Counter<string>;
        databaseQueries: client.Histogram<string>;
        databaseConnections: client.Gauge<string>;
        trainingSessions: client.Counter<string>;
        exercisesExecuted: client.Counter<string>;
        medicalDocuments: client.Counter<string>;
        treatmentPlans: client.Counter<string>;
        eventsScheduled: client.Counter<string>;
        resourceBookings: client.Counter<string>;
        messagesExchanged: client.Counter<string>;
        notificationsSent: client.Counter<string>;
    } | null;
    shutdown: () => Promise<void>;
};
export declare function setupSimpleMonitoring(app: Express, serviceName: string, options?: Partial<MonitoringConfig>): ReturnType<typeof setupMonitoring>;

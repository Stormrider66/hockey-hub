name: Code Quality

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main]

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: 8

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better relevancy

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm run lint:report || true
        continue-on-error: true

      - name: Upload ESLint report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: eslint-report
          path: eslint-report.json

      - name: Annotate ESLint results
        uses: ataylorme/eslint-annotate-action@v3
        if: always()
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          report-json: "eslint-report.json"

      - name: Run TypeScript checks
        run: |
          pnpm run type-check > typescript-report.txt 2>&1 || true
          cat typescript-report.txt

      - name: Check for unused dependencies
        run: |
          npx depcheck --json > depcheck-report.json || true
          if [ -s depcheck-report.json ]; then
            echo "### Unused Dependencies Found" >> $GITHUB_STEP_SUMMARY
            cat depcheck-report.json | jq -r '.dependencies[]' >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check bundle size
        if: github.event_name == 'pull_request'
        run: |
          # Build and analyze bundle size
          cd apps/frontend
          pnpm run build
          npx next-bundle-analyzer

      - name: SonarCloud Scan
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Comment PR with quality report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read reports
            let comment = '## Code Quality Report\n\n';
            
            // Add TypeScript errors if any
            if (fs.existsSync('typescript-report.txt')) {
              const tsReport = fs.readFileSync('typescript-report.txt', 'utf8');
              if (tsReport.includes('error')) {
                comment += '### TypeScript Errors\n```\n' + tsReport + '\n```\n\n';
              } else {
                comment += 'âœ… **TypeScript:** No errors found\n\n';
              }
            }
            
            // Add bundle size info
            comment += '### Bundle Size\n';
            comment += 'See artifacts for detailed bundle analysis\n\n';
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('Code Quality Report')
            );
            
            // Update or create comment
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
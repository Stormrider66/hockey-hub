name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: 8

jobs:
  test:
    name: Pre-deployment Tests
    uses: ./.github/workflows/ci.yml
    secrets: inherit

  build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        service:
          - api-gateway
          - user-service
          - calendar-service
          - training-service
          - communication-service
          - medical-service
          - statistics-service
          - payment-service
          - planning-service
          - admin-service
          - frontend
    outputs:
      image-tag: ${{ steps.meta.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/hockey-hub-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.service == 'frontend' && 'apps/frontend' || format('services/{0}', matrix.service) }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_VERSION=${{ env.NODE_VERSION }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.hockey-hub.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Kubernetes (Staging)
        run: |
          echo "Deploying to staging with image tag: ${{ needs.build.outputs.image-tag }}"
          # kubectl apply -f k8s/staging/
          # kubectl set image deployment/api-gateway api-gateway=${{ secrets.DOCKER_USERNAME }}/hockey-hub-api-gateway:${{ needs.build.outputs.image-tag }}
          # Add deployment commands here

      - name: Run smoke tests
        run: |
          # Run basic health checks
          curl -f https://staging.hockey-hub.com/health || exit 1

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Staging deployment completed'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main' && (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://hockey-hub.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create backup
        run: |
          echo "Creating database backup before deployment"
          # Add backup commands here

      - name: Deploy to Kubernetes (Production)
        run: |
          echo "Deploying to production with image tag: ${{ needs.build.outputs.image-tag }}"
          # kubectl apply -f k8s/production/
          # kubectl set image deployment/api-gateway api-gateway=${{ secrets.DOCKER_USERNAME }}/hockey-hub-api-gateway:${{ needs.build.outputs.image-tag }}
          # Add deployment commands here

      - name: Run smoke tests
        run: |
          # Run comprehensive health checks
          curl -f https://hockey-hub.com/health || exit 1

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment completed'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: failure()
    steps:
      - name: Rollback deployment
        run: |
          echo "Rolling back deployment"
          # Add rollback commands here

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: 'failure'
          text: 'Deployment rolled back due to failure'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
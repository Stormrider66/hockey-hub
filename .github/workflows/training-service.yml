name: Training Service CI/CD

on:
  push:
    paths:
      - 'services/training-service/**'
      - '.github/workflows/training-service.yml'
  pull_request:
    paths:
      - 'services/training-service/**'

jobs:
  test:
    name: Test Training Service
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml
          
      - name: Enable corepack
        run: corepack enable
        
      - name: Install dependencies
        run: pnpm install --frozen-lockfile --filter "training-service..."
        
      - name: Run linting
        run: pnpm --filter "training-service" run lint
        
      - name: Run unit tests
        run: pnpm --filter "training-service" run test
        
      - name: Test exercise management
        run: cd services/training-service && npm run test:exercises
        
      - name: Test training programs
        run: cd services/training-service && npm run test:programs
        
      - name: Test progress tracking
        run: cd services/training-service && npm run test:progress
        
      - name: Test workout generation
        run: cd services/training-service && npm run test:generation
        
      - name: Test exercise recommendations
        run: cd services/training-service && npm run test:recommendations
        
  integration-test:
    name: Integration Testing
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: training_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          
      - name: Install dependencies
        run: cd services/training-service && npm ci
        
      - name: Run database migrations
        run: cd services/training-service && npm run migrate
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: training_test
          
      - name: Run integration tests
        run: cd services/training-service && npm run test:integration
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: training_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: training_perf
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:6
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          
      - name: Install dependencies
        run: cd services/training-service && npm ci
        
      - name: Set up database with test data
        run: cd services/training-service && npm run seed:perf
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: training_perf
          
      - name: Run program generation performance test
        run: cd services/training-service && npm run test:perf:generation
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: training_perf
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          
      - name: Run concurrent user load test
        run: cd services/training-service && npm run test:perf:load
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: training_perf
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          
  build:
    name: Build Training Service
    needs: [test, integration-test, performance-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/release/'))
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract branch name
        shell: bash
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
        
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./services/training-service
          push: true
          tags: |
            ghcr.io/${{ github.repository }}-training-service:${{ env.BRANCH_NAME }}
            ghcr.io/${{ github.repository }}-training-service:${{ github.sha }} 
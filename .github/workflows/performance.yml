name: Performance Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run performance tests every Sunday at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: 8

jobs:
  lighthouse:
    name: Lighthouse Performance Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build frontend
        run: |
          cd apps/frontend
          pnpm run build

      - name: Start frontend
        run: |
          cd apps/frontend
          pnpm run start &
          npx wait-on http://localhost:3002 -t 60000

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3002
            http://localhost:3002/login
            http://localhost:3002/dashboard
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: './.lighthouserc.json'

      - name: Comment PR with Lighthouse results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const results = require('./lhci_reports/manifest.json');
            const summary = results[0].summary;
            
            const comment = `## Lighthouse Performance Report
            
            | Metric | Score |
            |--------|-------|
            | Performance | ${summary.performance * 100}% |
            | Accessibility | ${summary.accessibility * 100}% |
            | Best Practices | ${summary['best-practices'] * 100}% |
            | SEO | ${summary.seo * 100}% |
            | PWA | ${summary.pwa * 100}% |
            
            [View full report](${results[0].url})`;
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

  load-test:
    name: Load Testing
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: hockey_hub_load
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup databases
        run: |
          # Create all service databases
          for service in user calendar training communication medical statistics payment planning admin; do
            PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE ${service}_service_load;"
          done

      - name: Start backend services
        run: |
          pnpm run start:services:prod &
          sleep 60  # Wait for services to start
        env:
          NODE_ENV: production
          DATABASE_HOST: localhost
          REDIS_HOST: localhost

      - name: Run k6 load tests
        uses: grafana/k6-action@v0.3.0
        with:
          filename: tests/load/api-load-test.js
          flags: --out json=results.json

      - name: Upload load test results
        uses: actions/upload-artifact@v3
        with:
          name: load-test-results
          path: results.json

      - name: Generate performance report
        run: |
          echo "## Load Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat results.json | jq -r '.metrics | to_entries[] | "- \(.key): \(.value)"' >> $GITHUB_STEP_SUMMARY

  bundle-size:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build and analyze bundle
        run: |
          cd apps/frontend
          pnpm run build
          pnpm run analyze

      - name: Upload bundle stats
        uses: actions/upload-artifact@v3
        with:
          name: bundle-stats
          path: apps/frontend/.next/analyze/

      - name: Check bundle size limits
        run: |
          cd apps/frontend
          npx bundlesize --config bundlesize.config.json
name: User Service CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'services/user-service/**'
      - '.github/workflows/user-service.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'services/user-service/**'
      - '.github/workflows/user-service.yml'
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16 # Or your project's Node version
      - name: Install dependencies
        working-directory: ./services/user-service
        run: pnpm install --frozen-lockfile --filter "user-service..."
      - name: Run linting
        working-directory: ./services/user-service
        run: pnpm --filter "user-service" run lint

  test:
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:15-alpine # Use appropriate version
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16 # Match Node version
      - name: Install dependencies
        working-directory: ./services/user-service
        run: pnpm install --frozen-lockfile --filter "user-service..."
      - name: Wait for PostgreSQL
        run: sleep 10 # Simple wait, replace with proper health check if needed
      - name: Run unit tests
        working-directory: ./services/user-service
        env:
          # Ensure tests use the service container
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: test_user
          DB_PASSWORD: test_password
          DB_DATABASE: test_db
          JWT_SECRET: test-secret # Use test secrets
          JWT_REFRESH_SECRET: test-refresh-secret
        run: pnpm --filter "user-service" run test -- --coverage # Run tests defined in package.json
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # Add CODECOV_TOKEN to secrets
          directory: ./services/user-service/coverage
          flags: user-service

  # Placeholder for Security Scans (e.g., SAST, Dependency Scan)
  # security:
  #   runs-on: ubuntu-latest
  #   needs: test
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Run Dependency Check
  #       uses: owasp/dependency-check-action@v1.4.2
  #       with:
  #         project: 'user-service'
  #         path: './services/user-service'
  #         format: 'HTML'
  #     - name: Upload Dependency Check Report
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: Dependency Check Report
  #         path: dependency-check-report.html
  #     # Add SAST Scan (e.g., SonarCloud/CodeQL) here

  build:
    runs-on: ubuntu-latest
    needs: test # Make dependent on test, potentially security later
    if: github.event_name == 'push' # Only build on push events
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to ACR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.ACR_REGISTRY }} # Use secrets for registry name
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.ACR_REGISTRY }}/user-service
          tags: |
            type=ref,event=branch
            type=sha,format=long # Use long SHA for deployment precision
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./services/user-service
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.ACR_REGISTRY }}/user-service:buildcache
          cache-to: type=registry,ref=${{ secrets.ACR_REGISTRY }}/user-service:buildcache,mode=max

  # Placeholder Deployment Jobs (Adapt based on infra strategy - Helm/Kustomize/etc.)
  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: development
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Deploy placeholder
        run: echo "Deploying User Service ${{ github.sha }} to Development..."
      # - name: Set up kubectl
      #   uses: azure/setup-kubectl@v3
      # - name: Set AKS context (Dev)
      #   uses: azure/aks-set-context@v3
      #   # ... Azure credentials and context config ...
      # - name: Deploy with Helm/Kubectl
      #   run: |
      #     helm upgrade --install user-service ./services/user-service/helm \
      #       --namespace development \
      #       --set image.tag=sha-${{ github.sha }} \
      #       --values ./services/user-service/helm/values-dev.yaml

  deploy-staging:
    runs-on: ubuntu-latest
    needs: deploy-dev # Depends on dev deployment
    if: github.ref == 'refs/heads/main' # Triggered on merge to main
    environment: staging
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Deploy placeholder
        run: echo "Deploying User Service ${{ github.sha }} to Staging..."
      # - name: Set up kubectl
      # - name: Set AKS context (Staging)
      # - name: Deploy with Helm/Kubectl

  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging # Depends on staging deployment
    if: github.ref == 'refs/heads/main' # Triggered on merge to main
    environment:
      name: production
      url: https://api.hockeyhub.com/users # Example URL
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Deploy placeholder (requires manual approval or further steps)
        run: echo "Deploying User Service ${{ github.sha }} to Production..."
      # - name: Set up kubectl
      # - name: Set AKS context (Prod)
      # - name: Deploy with Helm/Kubectl (Canary/Blue-Green)

  # New steps
  # - name: Enable corepack
  #   run: corepack enable 